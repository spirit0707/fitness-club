from __future__ import annotations
from datetime import datetime
import logging
from logging import config
import json

class LoggingMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    LOGGING_DIR = ''

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        with open('config/logger.json') as f:
            config.dictConfig(json.load(f))
        self._logger = logging.getLogger()
    
    def log_action(self, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

        Args:
            action (str): –¥–µ–π—Å—Ç–≤–∏–µ
            details (str, optional): –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. Defaults to "".
        """
        self._logger.info('%s | %s', action, details)
        
class NotificationMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """

    def send_notification(self, title: str, message: str, notification_type: str = "info"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            title (str): –ó–∞–≥–æ–ª–æ–≤–æ–∫
            message (str): —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_type (str, optional): —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. Defaults to "info".
        """
        icons = {
            "info": "‚ÑπÔ∏è",
            "warning": "‚ö†Ô∏è", 
            "error": "‚ùå",
            "success": "‚úÖ"
        }
        
        icon = icons.get(notification_type, "üì¢")
        notification = f"{icon} –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {title}\n   {message}"
        
        print(notification)
        self._save_notification(notification)
    
    def _save_notification(self, notification: str):
        """poor man's message queue

        Args:
            notification (str): —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        with open("notifications.txt", "a", encoding="utf-8") as f:
            f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {notification}\n")
    
    def send_class_cancellation(self, class_name: str, reason: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

        Args:
            class_name (str): –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            reason (str, optional): –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã. Defaults to "".
        """
        title = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '{class_name}' –æ—Ç–º–µ–Ω–µ–Ω–∞"
        message = f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ '{class_name}' –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        if reason:
            message += f". –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        self.send_notification(title, message, "warning")
    
    def send_subscription_expiry(self, days_left: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞

        Args:
            days_left (int): –∫–æ–ª-–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
        """
        title = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞"
        if days_left == 0:
            message = "–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!"
            notification_type = "error"
        elif days_left <= 7:
            message = f"–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
            notification_type = "warning"
        else:
            message = f"–î–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
            notification_type = "info"
        
        self.send_notification(title, message, notification_type)